{"version":3,"sources":["components/out.js","App.js","serviceWorker.js","index.js"],"names":["Out","state","para","html","paraNo","e","_this","setState","target","value","props","getText","checked","react_default","a","createElement","className","htmlFor","type","name","min","max","onChange","this","required","cols","rows","setText","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","paras","format","axios","get","concat","then","res","text","data","console","log","catch","err","out_Out","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAEqBA,6MAEjBC,MAAQ,CACJC,KAAM,EACNC,MAAM,KAGVC,OAAS,SAACC,GACNC,EAAKC,SAAS,CAAEL,KAAMG,EAAEG,OAAOC,QAC/BH,EAAKI,MAAMC,QAAQN,EAAEG,OAAOC,MAAOH,EAAKL,MAAME,SAGlDA,KAAO,SAACE,GACJC,EAAKC,SAAS,CAACJ,KAAME,EAAEG,OAAOI,UAC9BN,EAAKI,MAAMC,QAAQL,EAAKL,MAAMC,KAAMG,EAAEG,OAAOI,kFAI7C,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,QAAf,gBACAJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASC,KAAK,OAAOC,IAAI,IAAIC,IAAI,KAAKC,SAAUC,KAAKnB,OAAQoB,UAAQ,IACjFX,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWC,KAAK,SAASG,SAAUC,KAAKpB,OACpDU,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,QAAf,UAEAJ,EAAAC,EAAAC,cAAA,YAAUI,KAAK,OAAOM,KAAK,MAAMC,KAAK,KAAKjB,MAAOc,KAAKb,MAAMiB,UAC7Dd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,qBA7BIa,aCCZC,cACnB,SAAAA,EAAYnB,GAAM,IAAAJ,EAAA,OAAAwB,OAAAC,EAAA,EAAAD,CAAAP,KAAAM,IAClBvB,EAAAwB,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAX,KAAMb,KAUNC,QAAU,SAACwB,EAAOhC,GAChB,IAAIiC,EAASjC,EAAO,OAAS,OAC7BkC,IAAMC,IAAN,mDAAAC,OAA6DJ,EAA7D,YAAAI,OAA6EH,IAC5EI,KAAK,SAACC,GACLnC,EAAKC,SAAS,CAACmC,KAAMD,EAAIE,MAAO,WAC9BC,QAAQC,IAAItB,KAAKtB,WAElB6C,MAAM,SAACC,GACRH,QAAQC,IAAIE,MAjBhBzC,EAAKL,MAAQ,CACXyC,KAAM,IAHUpC,mFAQhBiB,KAAKZ,2CAgBL,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,CAAKrC,QAASY,KAAKZ,QAASgB,QAASJ,KAAKtB,MAAMyC,eA3BvBd,aCSbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.ad14b164.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Out extends Component {\r\n\r\n    state = {\r\n        para: 1,\r\n        html: false\r\n    }\r\n\r\n    paraNo = (e) => {\r\n        this.setState({ para :e.target.value});\r\n        this.props.getText(e.target.value, this.state.html);\r\n    }\r\n\r\n    html = (e) => {\r\n        this.setState({html: e.target.checked});\r\n        this.props.getText(this.state.para, e.target.checked);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <h1>Sample Text Generator</h1>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"para\">Paragraph : </label>\r\n                        <input type=\"number\" name=\"para\" min=\"1\" max=\"10\" onChange={this.paraNo} required/>\r\n                        <input type=\"checkbox\" name=\"format\" onChange={this.html} />\r\n                        <label htmlFor=\"html\"> HTML </label>\r\n                        \r\n                        <textarea name=\"text\" cols=\"150\" rows=\"25\" value={this.props.setText}></textarea>\r\n                        <br/><br/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport Out from './components/out';\r\nexport default class App extends Component {\r\n  constructor(props){\r\n  super(props);  \r\n  this.state = {\r\n    text: ''\r\n  }\r\n}\r\n\r\n  componentDidMount(){\r\n    this.getText();\r\n  }\r\n\r\n  getText = (paras, html) => {\r\n    let format = html ? 'html' : 'text';\r\n    axios.get(`https://baconipsum.com/api/?type=all-meat&paras=${paras}&format=${format}`)\r\n    .then((res) => {\r\n      this.setState({text: res.data}, function(){\r\n        console.log(this.state);\r\n      });\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Out getText={this.getText} setText={this.state.text} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}